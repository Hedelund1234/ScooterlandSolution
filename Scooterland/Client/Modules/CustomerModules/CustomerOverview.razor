@using Scooterland.Shared.Models
@using Scooterland.Client.Services.CustomerServices;

<h3>Alle kunder</h3>

<div class="search-container">
	<i class="search-icon fa fa-search"></i>
	<input class="search-bar"
			placeholder="Søg efter produkt"
			id="navn"
			type="text" 
			@bind="nameSearch"
		   @bind:event="oninput" />
</div>

@if (filteredCustomers == null)
{
	<p><em>Ingen kunder fundet.</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Kunde Id</th>
				<th>Navn</th>
				<th>Email</th>
				<th>Telefonnummer</th>
				<th>Adresse</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var item in filteredCustomers)
			{
				<tr>
					<td class="cell">@item.CustomerId</td>
					@if (editingCustomerId == item.CustomerId)
					{
						<td class="cell"><input class="cell-input" @bind="item.Name" /></td>
						<td class="cell"><input class="cell-input" @bind="item.Email" /></td>
						<td class="cell"><input class="cell-input" @bind="item.Phonenumber" /></td>
						<td class="cell">
							<input class="cell-input" @bind="item.Address" />
							<div class="button-container">
								<button class="btn btn-save" @onclick="() => SaveCustomer(item)">Gem</button>
								<button class="btn btn-abort" @onclick="CancelEdit">Fortryd</button>
							</div>
						</td>
					}
					else
					{
						<td class="cell">@item.Name</td>
						<td class="cell">@item.Email</td>
						<td class="cell">@item.Phonenumber</td>
						<td class="cell">
							@item.Address
							<div class="button-container">
								<button class="edit-button" @onclick="() => EditCustomer(item.CustomerId)"><i class="fa-solid fa-pencil"></i></button>
								<button class="edit-button" @onclick="() => DeleteCustomer(item.CustomerId)"><i class="fa-regular fa-trash-can"></i></button>
							</div>
						</td>
					}
				</tr>
			}
		</tbody>
	</table>
}

@code {
	[Inject]
	public ICustomerService Service { get; set; }
	private List<Customer> customers = new List<Customer>();
	private List<Customer> filteredCustomers = new List<Customer>();
	private int? editingCustomerId = null;
	private string _nameSearch; //Private felt som gemmer værdien af inputtet fra søgningen
	private string nameSearch   //Bundet til input-feltet for søgning
	{
		get => _nameSearch; //Henter den aktuelle værdi af det private felt _nameSearch
		set
		{
			_nameSearch = value;    //Opdaterer det pribate felt _nameSearch med den nye værdi
			FilterCustomers();      //Kalder FilterEmployees() for at opdatere listen med det samme
		}
	}

	protected override async Task OnInitializedAsync()
	{
		customers = (await Service.GetAllCustomers()).ToList();
		filteredCustomers = customers;
	}

	private void EditCustomer(int customerId)
	{
		editingCustomerId = customerId; // Sæt den aktuelle række i redigeringstilstand
	}

	private async Task SaveCustomer(Customer customer)
	{
		await Service.UpdateCustomer(customer); // Opdater produktet i databasen
		editingCustomerId = null; // Afslut redigering
		customers = (await Service.GetAllCustomers()).ToList();
	}

	private void CancelEdit()
	{
		editingCustomerId = null; // Annuller redigering
	}

	private async Task DeleteCustomer(int customerId)
	{
		await Service.DeleteCustomer(customerId);
		customers = (await Service.GetAllCustomers()).ToList();
		filteredCustomers = customers;
		StateHasChanged();
	}

	private void FilterCustomers()
	{
		if (string.IsNullOrWhiteSpace(nameSearch))
		{
			filteredCustomers = customers; // Hvis søgningen er tom, vis alle produkter
		}
		else
		{
			filteredCustomers = customers.Where(p => p.Name.ToLower().Contains(nameSearch.ToLower())).ToList();
		}
	}
}