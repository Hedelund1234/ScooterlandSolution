@using Scooterland.Shared.Models
@using Scooterland.Client.Services.CustomerServices;
@using Scooterland.Client.Services.SaleServices;

<h3>Alle kunder</h3>

<div class="search-container">
	<i class="search-icon fa fa-search"></i>
	<input class="search-bar"
	placeholder="Søg"
	id="navn"
	type="text"
	@bind="nameSearch"
	@bind:event="oninput" />
</div>

@if (filteredCustomers == null)
{
	<p><em>Ingen kunder fundet.</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Kundenr.</th>
				<th>Navn</th>
				<th>Telefonnummer</th>
				<th>Email</th>
				<th colspan="2">Adresse</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var item in filteredCustomers)
			{
				<tr>
					<td class="cell">@item.CustomerId</td>
					@if (editingCustomerId == item.CustomerId)
					{
						<td class="cell"><input class="cell-input" @bind="item.Name" /></td>
						<td class="cell"><input class="cell-input" @bind="item.Phonenumber" /></td>
						<td class="cell"><input class="cell-input" @bind="item.Email" /></td>
						<td class="cell">
							<input class="cell-input" @bind="item.Address" />
						</td>
						<td>
							<div class="button-container">
								<button class="btn btn-save" @onclick="() => SaveCustomer(item)">Gem</button>
								<button class="btn btn-abort" @onclick="() => CancelEdit(item)">Fortryd</button>
							</div>
						</td>
					}
					else
					{
						<td class="cell">@item.Name</td>
						<td class="cell">@item.Phonenumber</td>
						<td class="cell">@item.Email</td>
						<td class="cell">@item.Address</td>
						<td>
							<div class="button-container">
								<button class="edit-button" @onclick="() => EditCustomer(item.CustomerId)">
									<i class="fa-solid fa-pencil"></i>
								</button>
								<button class="edit-button" @onclick="() => DeleteCustomer(item.CustomerId)">
									<i class="fa-regular fa-trash-can"></i>
								</button>
							</div>
						</td>
					}
				</tr>
			}
		</tbody>
	</table>
}

@if (isErrorBoxVisible)
{
	<div class="message-box">
		<div class="message-content">
			<h4>Fejl</h4>
			<p>@errorMessage</p>
			<div class="message-success">
				<button @onclick="CloseMessageBox">OK</button>
			</div>
		</div>
	</div>
}

@code {
	[Inject]
	public ICustomerService Service { get; set; }
	[Inject]
	public ISaleService SaleService { get; set; }
	private List<Customer> customers = new List<Customer>();
	private List<Customer> filteredCustomers = new List<Customer>();
	private List<Sale> allSales = new List<Sale>();
	private int? editingCustomerId = null;
	private string errorMessage;
	private bool isErrorBoxVisible = false;
	private string _nameSearch; //Private felt som gemmer værdien af inputtet fra søgningen
	private string nameSearch   //Bundet til input-feltet for søgning
	{
		get => _nameSearch; //Henter den aktuelle værdi af det private felt _nameSearch
		set
		{
			_nameSearch = value;    //Opdaterer det pribate felt _nameSearch med den nye værdi
			FilterCustomers();      //Kalder FilterEmployees() for at opdatere listen med det samme
		}
	}

	protected override async Task OnInitializedAsync()
	{
		customers = (await Service.GetAllCustomers()).ToList();
		filteredCustomers = customers;
	}

	private void EditCustomer(int customerId)
	{
		editingCustomerId = customerId; // Sæt den aktuelle række i redigeringstilstand
	}

	private async Task SaveCustomer(Customer customer)
	{
		Customer originalCustomer = await Service.GetCustomer(customer.CustomerId);
		customers = (await Service.GetAllCustomers()).ToList();
		if (originalCustomer?.Email != customer.Email)
		{
			if (customers.Any(x => x.Email == customer.Email))
			{
				errorMessage = $"Der findes allerede en kunde med email: {customer?.Email}";
				isErrorBoxVisible = true;
				return;
			}
		}

		if (originalCustomer?.Phonenumber != customer.Phonenumber)
		{
			if (customers.Any(x => x.Phonenumber == customer.Phonenumber))
			{
				errorMessage = $"Der findes allerede en kunde med telefonnummer: {customer?.Phonenumber}";
				isErrorBoxVisible = true;
				return;
			}
		}
		await Service.UpdateCustomer(customer); // Opdater produktet i databasen
		editingCustomerId = null; // Afslut redigering
		customers = (await Service.GetAllCustomers()).ToList();
	}

	private async Task CancelEdit(Customer customer)
	{
		filteredCustomers = (await Service.GetAllCustomers()).ToList();
		editingCustomerId = null; // Annuller redigering
	}

	private async Task DeleteCustomer(int customerId)
	{
		allSales = (await SaleService.GetAllSales()).ToList();
		if (!allSales.Any(x => x.CustomerId == customerId))
		{
			await Service.DeleteCustomer(customerId);
			customers = (await Service.GetAllCustomers()).ToList();
			filteredCustomers = customers;
			StateHasChanged();
		}
		else
		{
			errorMessage = "Du kan ikke slette en kunde som indgår i en ordre";
			isErrorBoxVisible = true;
		}

	}

	private void FilterCustomers()
	{
		if (string.IsNullOrWhiteSpace(nameSearch))
		{
			filteredCustomers = customers; // Hvis søgningen er tom, vis alle produkter
		}
		else
		{
			var nameSearchToLower = nameSearch.ToLower();

			filteredCustomers =
			customers.Where(c => c.Name.ToLower().Contains(nameSearchToLower) ||
			(c.Email.ToLower().Contains(nameSearchToLower)) ||
			(c.Address.ToLower().Contains(nameSearchToLower)) ||
			(c.Phonenumber.Contains(nameSearchToLower))).ToList();
		}
	}

	private void CloseMessageBox()
	{
		isErrorBoxVisible = false;
	}
}