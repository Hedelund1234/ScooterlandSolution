@using Scooterland.Shared.Models
@using Scooterland.Client.Services.CustomerServices
@using Scooterland.Client.Services.SaleServices
@using Scooterland.Client.Services.SalesLineItemServices
@using Scooterland.Client.Modules.ProductModules

<div class="flex-container">
	<!-- Første komponent (fylder 2/3 af bredden) -->
	<div class="two-thirds-width">
		<ProductSelectOverview OnAddedProduct="AddProductToSalesLineItem"
							   chosenProduct="@product" />
	</div>
	<div class="one-third-width">
		<!-- Anden komponent (fylder 1/3 af bredden) -->
		@if (currentSale == null)
		{
			<p><em>Ingen kunde tilføjet.</em></p>
		}
		else
		{
			<div>
				<span class="product-mrp">SaleId:</span>
				<span class="customer-name">@currentSale.SaleId</span>
				<span class="product-mrp">Kunde:</span>
				<span class="product-mrp">@currentSale.Customer.Name</span>
			</div>
		}

		@foreach (var item in totalSalesLineItems)
		{
			<div class="product-card">
				<div class="product-info">
					<p class="product-name">@item.Product.Name</p>
					<p class="product-mrp">@item.Product.Price</p>
				</div>



				<div class="product-price">
					<div class="quantity-control">
						<button class="quantity-btn" @onclick="() => OnMinusClicked(item)">-</button>
						<input class="quantity-input" value="@item.Quantity" />
						<button class="quantity-btn" @onclick="() => OnPlusClicked(item)">+</button>
					</div>
					<span class="price-discount">Price: @TotalLineItemPrice(item)</span>
				</div>
			</div>
		}

		<div class="total-price-bottom">
			<span class="total-price-margin"> Total price: </span>
			<span> @TotalPrice() </span>
		</div>
	</div>
</div>


@code {
	private Sale currentSale;
	public Product product { get; set; }
	private List<Product> products = new List<Product>();

	private List<SalesLineItem> totalSalesLineItems = new List<SalesLineItem>();
	private List<SalesLineItem> allSalesLineItems = new List<SalesLineItem>();

	[Inject]
	public ICustomerService CustomerService { get; set; }
	[Inject]
	public ISalesLineItemService SalesLineItemService { get; set; }
	[Inject]
	public ISaleService SaleService { get; set; }
	[Parameter]
	[SupplyParameterFromQuery]
	public int SaleId { get; set; }

	protected override async Task OnInitializedAsync()
	{
		currentSale = await SaleService.GetSale(SaleId);
		UpdateSalesLineItems();
	}

	public async Task UpdateSalesLineItems()
	{
		allSalesLineItems = (await SalesLineItemService.GetAllSalesLineItem()).ToList();
		totalSalesLineItems = allSalesLineItems.Where(salesLineItem => salesLineItem.SaleId == currentSale.SaleId).ToList();
		StateHasChanged();
	}

	public async Task OnMinusClicked(SalesLineItem salesLineItem)
	{
		// Only decrement if quantity is greater than 0
		if (salesLineItem.Quantity > 0)
		{
			salesLineItem.Quantity--;
			int statusCode = await SalesLineItemService.UpdateSalesLineItem(salesLineItem);
			UpdateSalesLineItems();
		}

		// If quantity is now 0, delete the item
		if (salesLineItem.Quantity == 0)
		{
			int deleteStatusCode = await SalesLineItemService.DeleteSalesLineItem(salesLineItem.SalesLineItemId); 
			UpdateSalesLineItems();
		}
	}

	public async Task OnPlusClicked(SalesLineItem salesLineItem)
	{
		salesLineItem.Quantity++;
		int statusCode = await SalesLineItemService.UpdateSalesLineItem(salesLineItem);
		UpdateSalesLineItems();
	}

	public decimal TotalPrice()
	{
		decimal totalPrice = 0;
		foreach (var item in totalSalesLineItems)
		{
			totalPrice += item.Product.Price * item.Quantity;
		}
		return totalPrice;
	}

	public decimal TotalLineItemPrice(SalesLineItem salesLineItem)
	{
		decimal totalPrice = 0;
		return totalPrice = salesLineItem.Product.Price * salesLineItem.Quantity;
	}

	private async Task AddProductToSalesLineItem(Product selectedProduct)
	{
		product = selectedProduct;
		SalesLineItem salesLineItem = new SalesLineItem();
		salesLineItem.Discount = 0;
		salesLineItem.Quantity = 1;
		salesLineItem.SaleId = currentSale.SaleId;
		salesLineItem.ProductId = product.ProductId;
		await SalesLineItemService.AddSalesLineItem(salesLineItem);
		allSalesLineItems = (await SalesLineItemService.GetAllSalesLineItem()).ToList();
		totalSalesLineItems = allSalesLineItems.Where(salesLineItem => salesLineItem.SaleId == currentSale.SaleId).ToList();
	}
}