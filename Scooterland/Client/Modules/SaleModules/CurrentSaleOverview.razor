@using Scooterland.Shared.Models
@using Scooterland.Client.Services.CustomerServices
@using Scooterland.Client.Services.SaleServices
@using Scooterland.Client.Services.SalesLineItemServices
@using Scooterland.Client.Services.SpecializationServices
@using Scooterland.Client.Modules.ProductModules

<div class="flex-container">
	<!-- Første komponent (fylder 2/3 af bredden) -->
	<div class="two-thirds-width">
		<ProductSelectOverview OnAddedProduct="AddProductToSalesLineItem"
							   chosenProduct="@product" />
	</div>
	<div class="one-third-width">
		<!-- Anden komponent (fylder 1/3 af bredden) -->
		@if (currentSale == null)
		{
			<p><em>Ingen kunde tilføjet.</em></p>
		}
		else
		{
			<div>
				<span class="product-mrp">SaleId:</span>
				<span class="customer-name">@currentSale.SaleId</span>
				<span class="product-mrp">Kunde:</span>
				<span class="product-mrp">@currentSale.Customer.Name</span>
			</div>
		}

		<div class="scrollable-box">
			@if (totalSalesLineItems != null && totalSalesLineItems.Any())
			{
				@foreach (var item in totalSalesLineItems)
				{
					<div class="product-card">
						<div class="product-info">
							<p class="product-name">@item.Product.Name</p>
							<p class="product-mrp">@item.Product.Price</p>
						</div>

						<div class="product-price">
							<div class="quantity-control">
								<button class="quantity-btn" @onclick="() => OnMinusClicked(item)">-</button>
								<input class="quantity-input" value="@item.Quantity" />
								<button class="quantity-btn" @onclick="() => OnPlusClicked(item)">+</button>
							</div>
							<span class="price-discount">Price: @TotalLineItemPrice(item)</span>
						</div>
					</div>
				}
			}
			else
			{
				<div class="empty-message">
					Ingen varer tilføjet endnu.
				</div>
			}
		</div>



		<div class="total-price-bottom">
			<span class="total-price-margin"> Total price: </span>
			<span> @TotalPrice() </span>
		</div>

@* 		<div>
			<span class="">Scooter brand:</span>
			@if (currentSale?.Specialization?.Brand == null)
			{
				<select @onchange="UpdateBrand" class="form-control">
					<option>Vælg et scooter brand</option>
					@foreach (var item in specializations)
					{
						<option value="@item.SpecializationId">@item.Brand</option>
					}
				</select>
			}
			else
			{
				<select @onchange="UpdateBrand" class="form-control">
					<option>@currentSale.Specialization.Brand</option>
					@foreach (var item in specializations)
					{
						<option value="@item.SpecializationId">@item.Brand</option>
					}
				</select>
			}
		</div> *@

		<div class="note-box-container">
			<label for="noteInput">Kommentar:</label>
			<textarea id="noteInput" class="note-input" @bind="noteInput"></textarea>
		</div>
		<button class="gem-button" @onclick="SaveKommentar">Gem</button>
	</div>
</div>




@code {
	private Sale currentSale;
	public Product product { get; set; }
	private List<Product> products = new List<Product>();
	private List<Specialization> specializations = new List<Specialization>();
	private int? specializationsid;

	private List<SalesLineItem> totalSalesLineItems = new List<SalesLineItem>();
	private List<SalesLineItem> allSalesLineItems = new List<SalesLineItem>();

	private string noteInput;

	[Inject]
	public ICustomerService CustomerService { get; set; }
	[Inject]
	public ISalesLineItemService SalesLineItemService { get; set; }
	[Inject]
	public ISaleService SaleService { get; set; }
	[Inject]
	public ISpecializationService SpecializationService { get; set; }
	[Parameter]
	[SupplyParameterFromQuery]
	public int SaleId { get; set; }

	protected override async Task OnInitializedAsync()
	{
		currentSale = await SaleService.GetSale(SaleId);
		if (currentSale.Kommentar != null)
		{
			noteInput = currentSale.Kommentar;
		}
		specializations = (await SpecializationService.GetAllSpecialization()).ToList();
		if (currentSale.SpecializationId != null)
		{
			specializationsid = currentSale.SpecializationId;
		}
		UpdateSalesLineItems();
	}

	public async Task UpdateSalesLineItems()
	{
		allSalesLineItems = (await SalesLineItemService.GetAllSalesLineItem()).ToList();
		totalSalesLineItems = allSalesLineItems.Where(salesLineItem => salesLineItem.SaleId == currentSale.SaleId).ToList();
		StateHasChanged();
	}

	public async Task OnMinusClicked(SalesLineItem salesLineItem)
	{
		// Only decrement if quantity is greater than 0
		if (salesLineItem.Quantity > 1)
		{
			salesLineItem.Quantity--;
			int statusCode = await SalesLineItemService.UpdateSalesLineItem(salesLineItem);
			UpdateSalesLineItems();
		}
		else
		{
			int deleteStatusCode = await SalesLineItemService.DeleteSalesLineItem(salesLineItem.SalesLineItemId);
			UpdateSalesLineItems();
		}
	}

	public async Task OnPlusClicked(SalesLineItem salesLineItem)
	{
		salesLineItem.Quantity++;
		int statusCode = await SalesLineItemService.UpdateSalesLineItem(salesLineItem);
		UpdateSalesLineItems();
	}

	public decimal TotalPrice()
	{
		decimal totalPrice = 0;
		foreach (var item in totalSalesLineItems)
		{
			totalPrice += item.Product.Price * item.Quantity;
		}
		if (totalPrice != 0)
		{
			return totalPrice;
		}
		return 0.00M;
	}

	public decimal TotalLineItemPrice(SalesLineItem salesLineItem)
	{
		decimal totalPrice = 0;
		return totalPrice = salesLineItem.Product.Price * salesLineItem.Quantity;
	}

	private async Task AddProductToSalesLineItem(Product selectedProduct)
	{
		SalesLineItem thisItem = totalSalesLineItems.FirstOrDefault(p => p.ProductId == selectedProduct.ProductId);

		if (thisItem != null)  // Check if a matching item was found
		{
			OnPlusClicked(thisItem);
		}
		else
		{
			product = selectedProduct;
			SalesLineItem salesLineItem = new SalesLineItem();
			salesLineItem.Discount = 0;
			salesLineItem.Quantity = 1;
			salesLineItem.SaleId = currentSale.SaleId;
			salesLineItem.ProductId = product.ProductId;
			await SalesLineItemService.AddSalesLineItem(salesLineItem);
			allSalesLineItems = (await SalesLineItemService.GetAllSalesLineItem()).ToList();
			totalSalesLineItems = allSalesLineItems.Where(salesLineItem => salesLineItem.SaleId == currentSale.SaleId).ToList();
		}

	}

	public async Task SaveKommentar()
	{
		currentSale.Kommentar = noteInput;
		await SaleService.UpdateSale(currentSale);

		StateHasChanged();
	}

	public async Task UpdateBrand(ChangeEventArgs e)
	{
		if (int.TryParse(e.Value?.ToString(), out int selectedId))
		{
			currentSale.SpecializationId = selectedId;
			await SaleService.UpdateSale(currentSale);
			currentSale = await SaleService.GetSale(SaleId);
			StateHasChanged();
		}
	}
}