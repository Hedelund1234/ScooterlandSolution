@using Scooterland.Shared.Models

@if (c1 == null)
{
	<p><em>Ingen kunde tilføjet.</em></p>
}
else
{
	<div>
		<span class="product-mrp">Kundenavn:</span>
		<span class="customer-name">@c1.Name</span>
		<span class="product-mrp">KundeId:</span>
		<span class="product-mrp">@c1.CustomerId</span>
	</div>
}

@foreach (var item in salesLineItems)
{
	<div class="product-card">
		<div class="product-info">
			<p class="product-name">@item.Product.Name</p>
			<p class="product-mrp">@item.Product.Price</p>
		</div>



		<div class="product-price">
			<div class="quantity-control">
				<button class="quantity-btn" @onclick="() => OnMinusClicked(item)">-</button>
				<input class="quantity-input" value="@item.Quantity" />
				<button class="quantity-btn" @onclick="() => OnPlusClicked(item)">+</button>
			</div>
			<span class="price-discount">Price: @TotalLineItemPrice(item)</span>
		</div>
	</div>
}

<div class="total-price-bottom">
	<span class="total-price-margin"> Total price: </span>
	<span> @TotalPrice() </span>
</div>







@code {

	private List<Product> products = new List<Product>();
	private List<SalesLineItem> salesLineItems = new List<SalesLineItem>();

	Customer c1 = new Customer { Name = "Hans", Phonenumber = "23232323", CustomerId = 1 };

	SalesLineItem s1 = new SalesLineItem { SalesLineItemId = 1, SaleId = 1, ProductId = 1, Quantity = 4, Discount = 0, Product = new Product { ProductId = 1, Name = "Dæk", Type = "Vare", Price = 250.00M } };
	SalesLineItem s2 = new SalesLineItem { SalesLineItemId = 2, SaleId = 2, ProductId = 2, Quantity = 1, Discount = 0, Product = new Product { ProductId = 2, Name = "Olie", Type = "Vare", Price = 89.95M } };
	SalesLineItem s3 = new SalesLineItem { SalesLineItemId = 3, SaleId = 3, ProductId = 3, Quantity = 3, Discount = 0, Product = new Product { ProductId = 3, Name = "Ko", Type = "Vare", Price = 22.22M } };

	public void OnMinusClicked(SalesLineItem salesLineItem)
	{
		salesLineItem.Quantity--;
	}

	public void OnPlusClicked(SalesLineItem salesLineItem)
	{
		salesLineItem.Quantity++;
	}

	public decimal TotalPrice()
	{
		decimal totalPrice = 0;
		foreach (var item in salesLineItems)
		{
			totalPrice += item.Product.Price * item.Quantity;
		}
		return totalPrice;
	}

	public decimal TotalLineItemPrice(SalesLineItem salesLineItem)
	{
		decimal totalPrice = 0;
		return totalPrice = salesLineItem.Product.Price * salesLineItem.Quantity;
	}

	protected override async Task OnInitializedAsync()
	{
		salesLineItems.Add(s1);
		salesLineItems.Add(s2);
		salesLineItems.Add(s3);
	}
}
