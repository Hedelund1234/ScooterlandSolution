@using Scooterland.Client.Modules.CustomerModules;
@using Scooterland.Client.Services.CustomerServices;
@using Scooterland.Client.Services.SaleServices;
@using Scooterland.Shared.Models;

<h3>CreateSale</h3>

<div class="box">
	<div class="main-search">
		Kunde email
	</div>
	<input placeholder="Indtast email" @bind="emailSearch" @bind:event="oninput" />
	<div class="main-search">
		Kunde telefonnummer
	</div>
	<input placeholder="Indtast telefonnummer" @bind="phoneNumSearch" @bind:event="oninput" />
</div>

<CreateCustomer CustomerModel="@selectedCustomer" />

<div class="flex-box">
	<button class="btn btn-primary" @onclick="GoToNextPage">
		Næste side
	</button>
</div>

@if (isMessageBoxVisible)
{
	<div class="message-box">
		<div class="message-content">
			<h4>Tilføj kunde</h4>
			<p>Du mangler at tilføje en kunde</p>
			<div class="message-actions">
				<button @onclick="CloseMessageBox">Luk</button>
			</div>
		</div>
	</div>
}

@code {
	private List<Customer> customers = new List<Customer>();
	private List<Customer> filteredCustomer = new List<Customer>();
	private List<Sale> saleList = new List<Sale>();
	private Customer selectedCustomer = new Customer();
	private Sale currentSale = new Sale();
	private string _phoneNumSearch;
	private string _emailSearch;
	private bool isMessageBoxVisible = false;
	[Inject]
	public NavigationManager Navigation { get; set; }
	[Inject]
	public ICustomerService CustomerService { get; set; }

	[Inject]
	public ISaleService SaleService { get; set; }

	protected override async Task OnInitializedAsync()
	{
		customers = (await CustomerService.GetAllCustomers()).ToList();
	}

	private string phoneNumSearch   //Bundet til input-feltet for søgning
	{
		get => _phoneNumSearch; //Henter den aktuelle værdi af det private felt _nameSearch
		set
		{
			_phoneNumSearch = value;    //Opdaterer det pribate felt _nameSearch med den nye værdi
			foreach (var customer in customers)
			{
				if (customer.Phonenumber == _phoneNumSearch && !string.IsNullOrEmpty(_phoneNumSearch))
				{
					selectedCustomer = customer; // Opdaterer CustomerModel i CreateCustomer
				}
			}
		}
	}
	private string emailSearch
	{
		get => _emailSearch;
		set
		{
			_emailSearch = value;
			foreach (var customer in customers)
			{
				if (customer.Email == _emailSearch && !string.IsNullOrEmpty(_emailSearch))
				{
					selectedCustomer = customer;
				}
			}
		}
	}

	private void CloseMessageBox()
	{
		isMessageBoxVisible = false;
	}

	private async Task GoToNextPage()
	{
		if (selectedCustomer != null)
		{
			try
			{
				customers = (await CustomerService.GetAllCustomers()).ToList();
				Customer dbCustomer = customers.FirstOrDefault(c => c.Phonenumber == selectedCustomer.Phonenumber);

				currentSale.CustomerId = dbCustomer.CustomerId;
				currentSale.StartDate = DateTime.Now;
				await SaleService.AddSale(currentSale);

				saleList = (await SaleService.GetAllSales()).ToList();
				Sale saleToTransfer = saleList.FirstOrDefault(s => s.CustomerId == currentSale.CustomerId && s.StartDate == currentSale.StartDate);
				Navigation.NavigateTo($"/sales/current-sale?SaleId={saleToTransfer.SaleId}");

			}
			catch
			{
				isMessageBoxVisible = true;
			}
		}
		else
		{
			
		}
	}
}
