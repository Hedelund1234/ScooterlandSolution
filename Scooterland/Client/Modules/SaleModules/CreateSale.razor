@using Scooterland.Client.Modules.CustomerModules;
@using Scooterland.Client.Services.CustomerServices;
@using Scooterland.Client.Services.SaleServices;
@using Scooterland.Shared.Models;
@inject NavigationManager Navigation

<h3>CreateSale</h3>

<div class="box">
	<div class="main-search">
		Kunde email
	</div>
	<input placeholder="Indtast email" @bind="emailSearch" @bind:event="oninput" />
	<div class="main-search">
		Kunde telefonnummer
	</div>
	<input placeholder="Indtast telefonnummer" @bind="phoneNumSearch" @bind:event="oninput" />
</div>

<CreateCustomer CustomerModel="@selectedCustomer" />

<div class="flex-box">
	<button class="btn btn-primary" @onclick="GoToNextPage">
		Næste side
	</button>
</div>

@code {
	private List<Customer> customers = new List<Customer>();
	private List<Customer> filteredCustomer = new List<Customer>();
	private Customer selectedCustomer = new Customer();

	private string _phoneNumSearch;
	private string _emailSearch;

	[Inject]
	public ICustomerService Service { get; set; }

	[Inject]
	public ISaleService db { get; set; }

	protected override async Task OnInitializedAsync()
	{
		customers = (await Service.GetAllCustomers()).ToList();
	}

	private string phoneNumSearch   //Bundet til input-feltet for søgning
	{
		get => _phoneNumSearch; //Henter den aktuelle værdi af det private felt _nameSearch
		set
		{
			_phoneNumSearch = value;    //Opdaterer det pribate felt _nameSearch med den nye værdi
			foreach (var customer in customers)
			{
				if (customer.Phonenumber == _phoneNumSearch && !string.IsNullOrEmpty(_phoneNumSearch))
				{
					selectedCustomer = customer; // Opdaterer CustomerModel i CreateCustomer
				}
			}
		}
	}
	private string emailSearch
	{
		get => _emailSearch;
		set
		{
			_emailSearch = value;
			foreach (var customer in customers)
			{
				if (customer.Email == _emailSearch && !string.IsNullOrEmpty(_emailSearch))
				{
					selectedCustomer = customer;
				}
			}
		}
	}

	private void GoToNextPage()
	{
		if (selectedCustomer == null || selectedCustomer.CustomerId == 0)
		{
			return;
		}

		CreateSaleAddCustomerToSale();
		var customerJson = System.Text.Json.JsonSerializer.Serialize(selectedCustomer);
		var encodedCustomer = Uri.EscapeDataString(customerJson);
		Navigation.NavigateTo($"/sales/current-sale?customerJson={encodedCustomer}");
	}

	private async Task CreateSaleAddCustomerToSale()
	{
		Sale sale = new Sale { CustomerId = selectedCustomer .CustomerId};
		await db.AddSale(sale);
	}
}
