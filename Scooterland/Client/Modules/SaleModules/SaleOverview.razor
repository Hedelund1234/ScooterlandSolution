@using Scooterland.Shared.Models
@using Scooterland.Client.Services.SaleServices;
@using Scooterland.Client.Services.EmployeeServices;

<h3>Alle ordrer</h3>

<div class="search-container">
	<i class="search-icon fa fa-search"></i>
	<input class="search-bar"
	placeholder="Søg på kundenavn"
	id="navn"
	type="text"
	@bind="nameSearch"
	@bind:event="oninput" />
</div>

@if (filteredSales == null)
{
	<p><em>Ingen sales fundet.</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Id</th>
				<th>Kunde navn</th>
				<th>Mekaniker</th>
				<th>Scooter mærke</th>
				<th>Kommentar</th>
				<th>Start dato</th>
				<th>Slut dato</th>
				<th>Telefonnr.</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var item in filteredSales)
			{
				<tr @ondblclick="() => HandleRowClick(item)">
					<td class="cell">@item.SaleId</td>
					<td class="cell">@item.Customer.Name</td>
					@if (item.Employee is null)
					{
						<td @onclick="()=>AssignMekanikerToSale(item)" class="cell"></td>
					}
					else
					{
						<td @onclick="()=>AssignMekanikerToSale(item)" class="cell">@item.Employee.Name</td>
					}
					@if (item.Specialization is null)
					{
						<td class="cell"></td>
					}
					else
					{
						<td class="cell">@item.Specialization.Brand</td>
					}
					@if (item.Comment is null)
					{
						<td class="cell"></td>
					}
					else
					{
						<td class="cell">@item.Comment</td>
					}
					<td class="cell">@item.StartDate</td>
					<td class="cell">@item.EndDate</td>
					<td class="cell">@item.Customer.Phonenumber</td>
				</tr>
				@if (showEmployeeDropdown && item.SaleId == currentSaleId)
				{
					<tr>
						<td></td>
						<td></td>
						<td colspan="2">
							<div class="employee-dropdown">
								<select class="employee-dropdown" @bind="selectedEmployeeId">
									<option value="">-- Vælg mekaniker --</option>
									@foreach (var emp in employeeList)
									{
										<option value="@emp.EmployeeId">@emp.Name</option>
									}
								</select>
								<button class="employee-btn" @onclick="UpdateSaleWithMekaniker">Gem</button>
								<button class="employee-btn" @onclick="CancelAssignEmployee">Annuller</button>
								<button class="employee-btn" @onclick="RemoveMekanikerFromSale">Fjern</button>
							</div>
						</td>
						<td></td>
						<td></td>
						<td></td>
						<td></td>
					</tr>
				}
			}
		</tbody>
	</table>
}

@code {
	[Inject]
	public ISaleService Service { get; set; }
	[Inject]
	public IEmployeeService EmployeeService { get; set; }
	private bool showEmployeeDropdown = false;
	private int? selectedEmployeeId = null;
	// Repræsenterer det aktuelle Sale, der skal tildeles en mekaniker via dropdown-menuen.
	private Sale? currentSale;
	[Inject]
	public NavigationManager Navigation { get; set; }
	private List<Sale> sales = new List<Sale>();
	private List<Sale> filteredSales = new List<Sale>();
	// Indeholder listen over ansatte med rollen "Mekaniker," som vises i dropdown-menuen til tildeling af mekanikere til et Sale.
	private List<Employee> employeeList = new List<Employee>();
	private int? editingSaleId = null;
	private string _nameSearch; //Private felt som gemmer værdien af inputtet fra søgningen
	private string nameSearch   //Bundet til input-feltet for søgning
	{
		get => _nameSearch; //Henter den aktuelle værdi af det private felt _nameSearch
		set
		{
			_nameSearch = value;    //Opdaterer det pribate felt _nameSearch med den nye værdi
			FilterSales();      // Kalder FilterEmployees() for at opdatere listen med det samme
		}
	}
	private int currentSaleId;

	protected override async Task OnInitializedAsync()
	{
		sales = (await Service.GetAllSales()).ToList();
		filteredSales = sales;
	}

	private void FilterSales()
	{
		if (string.IsNullOrWhiteSpace(nameSearch))
		{
			filteredSales = sales; // Hvis søgningen er tom, vis alle produkter
		}
		else
		{
			filteredSales = sales.Where(p => 
			p.Customer.Name.ToLower().Contains(nameSearch.ToLower())).ToList();
		}
	}

	private void HandleRowClick(Sale sale)
	{
		if (sale.EndDate != null)
		{
			Navigation.NavigateTo($"/sales/invoice?saleId={sale.SaleId}");
		}
		else
		{
			Navigation.NavigateTo($"/sales/current-sale?saleId={sale.SaleId}");
		}
	}


	private async Task AssignMekanikerToSale(Sale sale)
	{
		currentSaleId = sale.SaleId;
		// Henter alle ansatte og filtrerer dem, så kun dem med rollen "Mekaniker" vises i listen.
		if (sale.SpecializationId == null)
		{
			employeeList = (await EmployeeService.GetAllEmployees()).Where(e => e.Role == "Mekaniker").ToList();
		}
		else
		{
			employeeList = (await EmployeeService.GetAllEmployees()).Where(e => e.Role == "Mekaniker"
								&& e.Specializations.Any(s => s.SpecializationId == sale.SpecializationId)).ToList();
		}
		// Hvis der findes mekanikere, aktiveres dropdown-menuen og det valgte Sale gemmes i currentSale.
		if (employeeList.Any())
		{
			currentSale = sale;         // Sætter det Sale, som dropdown-menuen relaterer til.
			showEmployeeDropdown = true; // Viser vores dropdown menu hvor vi kan assign en mekaniker
			StateHasChanged();
		}
	}

	private async Task UpdateSaleWithMekaniker()
	{
		// Hvis der er et aktuelt Sale og en valgt mekaniker, så fortsætter opdateringen.
		if (currentSale != null && selectedEmployeeId != null)
		{
			// Find den valgte mekaniker baseret på deres EmployeeId.
			var selectedEmployee = employeeList.FirstOrDefault(e => e.EmployeeId == selectedEmployeeId);
			if (selectedEmployee != null)
			{
				currentSale.EmployeeId = selectedEmployee.EmployeeId; // Tildel mekanikerens Id til det aktuelle Sale.
				await Service.UpdateSale(currentSale); // Gem opdateringen i databasen.

				// Opdater Sale-listen og den filtrerede liste, så ændringerne kan ses i vores UI.
				sales = (await Service.GetAllSales()).ToList();
				filteredSales = sales;
			}
		}
		CancelAssignEmployee(); // Luk dropdown-menuen og nulstil værdier.
	}

	private void CancelAssignEmployee()
	{
		currentSale = null; // Nulstiller det aktuelle Sale.
		selectedEmployeeId = null; // Nulstiller den valgte mekaniker.
		showEmployeeDropdown = false; // Skujler vores dropdown menu.
		StateHasChanged();
	}

	private async Task RemoveMekanikerFromSale()
	{
		if (currentSale != null)
		{
			currentSale.EmployeeId = null; // Fjerner mekaniker fra Sale
			await Service.UpdateSale(currentSale); // Gem opdateringen i databasen.

			// Opdater Sale-listen og den filtrerede liste, så ændringerne kan ses i vores UI.
			sales = (await Service.GetAllSales()).ToList();		
		}
		CancelAssignEmployee();
	}
}