@using Scooterland.Shared.Models
@using Scooterland.Client.Services.EmployeeServices;
@using Scooterland.Client.Services.SpecializationServices;


@* Søgefelt-container, der inkluderer et ikon og et input-felt *@
@* - Ikonet angiver søgefunktionen visuelt *@
@* - Input-feltet er bundet til 'nameSearch' via @bind og reagerer på 'oninput'-event *@

<h3>Alle ansatte</h3>

<div class="search-container">
	<i class="search-icon fa fa-search"></i>
	<input class="search-bar"
	placeholder="Søg efter medarbejder"
	id="navn"
	type="text"
	@bind="nameSearch"
	@bind:event="oninput" />
</div>

@if (filteredEmployees == null)
{
	<p><em>Ingen medarbejdere fundet.</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Id</th>
				<th>Navn</th>
				<th>Role</th>
				<th>Mærke specialitioner</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var item in filteredEmployees)
			{
				<tr>
					<td class="cell">@item.EmployeeId</td>
					@if (editingEmployeeId == item.EmployeeId)
					{
						<td class="cell"><input class="cell-input" @bind="item.Name" /></td>
						@* <td class="cell"><input class="cell-input" @bind="item.Role" /></td> *@
						<td class="cell">
							<input class="cell-input" @bind="item.Role" />
							<div class="button-container">
								<button class="btn btn-save" @onclick="() => SaveEmployee(item)">Gem</button>
								<button class="btn btn-abort" @onclick="CancelEdit">Fortryd</button>
							</div>
						</td>
					}
					else
					{
						<td class="cell">@item.Name</td>
						@* <td class="cell">@item.Role</td> *@
						<td class="cell">
							@item.Role
							<div class="button-container">
								<button class="edit-button" @onclick="() => EditEmployee(item.EmployeeId)"><i class="fa-solid fa-pencil"></i></button>
								<button class="edit-button" @onclick="() => DeleteEmployee(item.EmployeeId)"><i class="fa-regular fa-trash-can"></i></button>
							</div>
						</td>



						<!--Shows current specializations on employee if any-->
 						<td>
							<div>Nuværende mærker</div>
							@foreach (var spec in item.Specializations)
							{
								<div>
									@spec.Brand
									<button class="edit-button" @onclick="() => RemoveSpecialization(item, spec)"><i class="fa-regular fa-trash-can"></i></button>
								</div>
							}

							<!--Selection from all specialization on given employee-->
							<div class="dropdown-specialization">
								<button @onclick="() => ToggleDropdown(item.EmployeeId)">
									Vælg en specialisering
								</button>

								@if (activeEmployeeId == item.EmployeeId)
								{
									<ul class="dropdown-menu-specialization">
										@foreach (var brand in allSpecializations)
										{
											<li>
												<a class="dropdown-item-specialization" @onclick="() => AddSpecialization(item, brand)">
													@brand.Brand
												</a>
											</li>
										}
									</ul>
								}
							</div>
						</td>
						
					}
				</tr>
			}
		</tbody>
	</table>
}


@code {
	[Inject]
	public IEmployeeService Service { get; set; }
	[Inject]
	public ISpecializationService SpecializationService { get; set; }
	private List<Employee> employees = new List<Employee>();
	private List<Employee> filteredEmployees = new List<Employee>();
	private List<Specialization> allSpecializations = new List<Specialization>();
	private int? editingEmployeeId = null;
	private string _nameSearch; //Private felt som gemmer værdien af inputtet fra søgningen
	private string nameSearch   //Bundet til input-feltet for søgning
	{
		get => _nameSearch; //Henter den aktuelle værdi af det private felt _nameSearch
		set
		{
			_nameSearch = value;    //Opdaterer det pribate felt _nameSearch med den nye værdi
			FilterEmployees();      //Kalder FilterEmployees() for at opdatere listen med det samme
		}
	}
	private int? activeEmployeeId;

	protected override async Task OnInitializedAsync()
	{
		employees = (await Service.GetAllEmployees()).ToList();
		filteredEmployees = employees;
		allSpecializations = (await SpecializationService.GetAllSpecialization()).ToList();

	}

	private void ToggleDropdown(int employeeId)
	{
		if (activeEmployeeId == employeeId)
		{
			activeEmployeeId = null; //Close dropdown
		}
		else
		{
			activeEmployeeId = employeeId; //Open dropdown for given employee
		}
	}

 	public async Task RemoveSpecialization(Employee employee, Specialization specialization)
	{
		employee.Specializations.Remove(specialization);
		await Service.UpdateEmployee(employee);
		employees = (await Service.GetAllEmployees()).ToList();
		StateHasChanged();
	} 

	public async Task AddSpecialization(Employee employee, Specialization specialization)
	{
		if (!employee.Specializations.Exists(s => s.SpecializationId == specialization.SpecializationId)) //If specialization already exist 
		{
			employee.Specializations.Add(specialization);
			await Service.UpdateEmployee(employee);
			employees = (await Service.GetAllEmployees()).ToList();
			StateHasChanged();
		}

	}

	private void EditEmployee(int employeeId)
	{
		editingEmployeeId = employeeId; // Sæt den aktuelle række i redigeringstilstand
	}

	private async Task SaveEmployee(Employee employee)
	{
		await Service.UpdateEmployee(employee); // Opdater produktet i databasen
		editingEmployeeId = null; // Afslut redigering
		employees = (await Service.GetAllEmployees()).ToList();
	}

	private void CancelEdit()
	{
		editingEmployeeId = null; // Annuller redigering
	}

	private async Task DeleteEmployee(int employeeId)
	{
		await Service.DeleteEmployee(employeeId);
		employees = (await Service.GetAllEmployees()).ToList();
		filteredEmployees = employees;
		StateHasChanged();
	}

	private void FilterEmployees()
	{
		if (string.IsNullOrWhiteSpace(nameSearch))
		{
			filteredEmployees = employees; // Hvis søgningen er tom, vis alle produkter
		}
		else
		{
			filteredEmployees = employees.Where(p => p.Name.ToLower().Contains(nameSearch.ToLower())).ToList();
		}
	}
}