@using Scooterland.Shared.Models
@using Scooterland.Client.Services.EmployeeServices;


@* Søgefelt-container, der inkluderer et ikon og et input-felt *@
@* - Ikonet angiver søgefunktionen visuelt *@
@* - Input-feltet er bundet til 'nameSearch' via @bind og reagerer på 'oninput'-event *@
<div class="search-container">
	<i class="search-icon fa fa-search"></i>
	<input class="search-bar"
		   placeholder="Søg efter medarbejder"
		   id="navn"
		   type="text"
		   @bind="nameSearch"
		   @bind:event="oninput" />
</div>

<div class="search-button-container">
	<button class="btn-dark" @onclick="SearchEmployees">Søg</button>
	<button class="btn-dark" @onclick="ClearEmployees">Ryd</button>
</div>




@if (filteredEmployees == null)
{
	<p><em>Ingen produkter fundet.</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Id</th>
				<th>Navn</th>
				<th>Role</th>				

			</tr>
		</thead>
		<tbody>
			@foreach (var item in filteredEmployees)
			{
				<tr>
					<td class="cell">@item.EmployeeId</td>
					@if (editingEmployeeId == item.EmployeeId)
					{
						<td class="cell"><input class="cell-input" @bind="item.Name" /></td>
						@* <td class="cell"><input class="cell-input" @bind="item.Role" /></td> *@
						<td class="cell">
							<input class="cell-input" @bind="item.Role" />
							<div class="button-container">
								<button class="btn btn-save" @onclick="() => SaveEmployee(item)">Gem</button>
								<button class="btn btn-abort" @onclick="CancelEdit">Fortryd</button>
							</div>
						</td>
					}
					else
					{
						<td class="cell">@item.Name</td>
						@* <td class="cell">@item.Role</td> *@
						<td class="cell">
							@item.Role
							<div class="button-container">
								<button class="edit-button" @onclick="() => EditEmployee(item.EmployeeId)"><i class="fa-solid fa-pencil"></i></button>
								<button class="edit-button" @onclick="() => DeleteEmployee(item.EmployeeId)"><i class="fa-regular fa-trash-can"></i></button>
							</div>
						</td>
					}
				</tr>
			}
		</tbody>
	</table>
}


@code {
	// private string nameSearch;
	private List<Employee> employees = new List<Employee>();
	private List<Employee> filteredEmployees = new List<Employee>();
	private int? editingEmployeeId = null;

	private string nameSearch	//Bundet til input-feltet for søgning
	{
		get => _nameSearch;	//Henter den aktuelle værdi af det private felt _nameSearch
		set
		{
			_nameSearch = value;	//Opdaterer det pribate felt _nameSearch med den nye værdi
			FilterEmployees();		//Kalder FilterEmployees() for at opdatere listen med det samme
		}
	}
	private string _nameSearch;	//Private felt som gemmer værdien af inputtet fra søgningen

	[Inject]
	public IEmployeeService Service { get; set; }

	protected override async Task OnInitializedAsync()
	{
		employees = (await Service.GetAllEmployees()).ToList();
		filteredEmployees = employees;
	}



	private void EditEmployee(int employeeId)
	{
		editingEmployeeId = employeeId; // Sæt den aktuelle række i redigeringstilstand
	}

	private async Task SaveEmployee(Employee employee)
	{
		await Service.UpdateEmployee(employee); // Opdater produktet i databasen
		editingEmployeeId = null; // Afslut redigering
		employees = (await Service.GetAllEmployees()).ToList();
	}

	private void CancelEdit()
	{
		editingEmployeeId = null; // Annuller redigering
	}

	private async Task DeleteEmployee(int employeeId)
	{
		await Service.DeleteEmployee(employeeId);
		employees = (await Service.GetAllEmployees()).ToList();
	}

	private void SearchEmployees()
	{
		FilterEmployees();
		StateHasChanged();
	}

	private void ClearEmployees()
	{
		filteredEmployees = employees;
		nameSearch = "";
		StateHasChanged();
	}

	private void FilterEmployees()
	{
		if (string.IsNullOrWhiteSpace(nameSearch))
		{
			filteredEmployees = employees; // Hvis søgningen er tom, vis alle produkter
		}
		else
		{
			filteredEmployees = employees.Where(p => p.Name.Contains(nameSearch)).ToList();
		}
	}
}