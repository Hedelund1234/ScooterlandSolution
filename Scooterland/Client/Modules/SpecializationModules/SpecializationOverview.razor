@using Scooterland.Shared.Models
@using Scooterland.Client.Services.SpecializationServices



<div class="search-container">
	<i class="search-icon fa fa-search"></i>
	<input class="search-bar" placeholder="Søg efter brand" id="navn" type="text" @bind="brandSearch" />
</div>

<div class="search-button-container">
	<button class="btn-dark" @onclick="SearchSpecialization">Søg</button>
	<button class="btn-dark" @onclick="ClearSpecialization">Ryd</button>
</div>

@if (filteredSpecializations == null)
{
	<p><em>Ingen produkter fundet.</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Id</th>
				<th>Brand</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var item in filteredSpecializations)
			{
				<tr>
					<td class="cell">@item.SpecializationId</td>
					@if (editingSpecializationsId == item.SpecializationId)
					{
						<td class="cell">
							<input class="cell-input" @bind="item.Brand" />
							<div class="button-container">
								<button class="btn btn-save" @onclick="() => SaveSpecialization(item)">Gem</button>
								<button class="btn btn-abort" @onclick="CancelEdit">Fortryd</button>
							</div>
						</td>
					}
					else
					{
						<td class="cell">
							@item.Brand
							<div class="button-container">
								<button class="edit-button" @onclick="() => EditSpecialization(item.SpecializationId)"><i class="fa-solid fa-pencil"></i></button>
								<button class="edit-button" @onclick="() => DeleteSpecialization(item.SpecializationId)"><i class="fa-regular fa-trash-can"></i></button>
							</div>
						</td>
					}
				</tr>
			}
		</tbody>
	</table>
}


@code {
	private string brandSearch;
	private List<Specialization> specializations = new List<Specialization>();
	private List<Specialization> filteredSpecializations = new List<Specialization>();

	private int? editingSpecializationsId = null;

	[Inject]
	public ISpecializationService Service { get; set; }

	protected override async Task OnInitializedAsync()
	{
		specializations = (await Service.GetAllSpecialization()).ToList();
		filteredSpecializations = specializations;
	}

	private void EditSpecialization(int specializationId)
	{
		editingSpecializationsId = specializationId; // Sæt den aktuelle række i redigeringstilstand
	}

	private async Task SaveSpecialization(Specialization specialization)
	{
		await Service.UpdateSpecialization(specialization); // Opdater produktet i databasen
		editingSpecializationsId = null; // Afslut redigering
		specializations = (await Service.GetAllSpecialization()).ToList();
	}

	private void CancelEdit()
	{
		editingSpecializationsId = null; // Annuller redigering
	}

	private async Task DeleteSpecialization(int specializationId)
	{
		await Service.DeleteSpecialization(specializationId);
		specializations = (await Service.GetAllSpecialization()).ToList();
	}

	private void SearchSpecialization()
	{
		FilterSpecialization();
		StateHasChanged();
	}

	private void ClearSpecialization()
	{
		filteredSpecializations = specializations;
		brandSearch = "";
		StateHasChanged();
	}

	private void FilterSpecialization()
	{
		if (string.IsNullOrWhiteSpace(brandSearch))
		{
			filteredSpecializations = specializations; // Hvis søgningen er tom, vis alle specializations
		}
		else
		{
			filteredSpecializations = specializations.Where(p => p.Brand.Contains(brandSearch)).ToList();
		}
	}

}
