@using Scooterland.Shared.Models
@using Scooterland.Client.Services.ProductServices;



<div class="search-container">
	<i class="search-icon fa fa-search"></i>
	<input class="search-bar" placeholder="Søg efter produkt" id="navn" type="text" @bind="navn" />
</div>



@if (products == null)
{
	<p><em>Ingen produkter fundet.</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Product Id</th>
				<th>Name</th>
				<th>Type</th>
				<th>Price</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var item in products)
			{
				<tr>
					<td>@item.ProductId</td>
					<td>@item.Name</td>
					<td>@item.Type</td>
					<td>@item.Price</td>
					<button class="btn btn-primary" @onclick="() => UpdateProduct(item.ProductId)">✏️ Rediger</button>
				</tr>
				@if (EditingProductId == item.ProductId)
				{
					<tr>
						<td colspan="3">
							<div class="edit-section">
								<label>Navn: <input @bind="item.Name" /></label>
								<label>Pris: <input type="number" @bind="item.Price" /></label>
								<button class="btn btn-success" @onclick="SaveEdit">Gem</button>
								<button class="btn btn-danger" @onclick="CancelEdit">Fortryd</button>
							</div>
						</td>
					</tr>
				}
			}
		</tbody>
	</table>
}


@code {
	private string navn;
	private List<Product> products = new List<Product>();

	[Inject]
	public IProductService Service { get; set; }

	protected override async Task OnInitializedAsync()
	{
		products = (await Service.GetAllProducts()).ToList();
	}

	private int? EditingProductId = null;

	public void UpdateProduct(int productId)
	{
		EditingProductId = productId;
	}

	private void StartEditing(int productId)
	{
		
	}

	private void SaveEdit()
	{
		// Gem ændringerne (f.eks. opdater listen eller lav en API-opkald)
		EditingProductId = null;
	}

	private void CancelEdit()
	{
		// Fortryd redigering
		EditingProductId = null;
	}

}
