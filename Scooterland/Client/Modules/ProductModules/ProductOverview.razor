@using Scooterland.Shared.Models
@using Scooterland.Client.Services.ProductServices;



<div class="search-container">
	<i class="search-icon fa fa-search"></i>
	<input class="search-bar" placeholder="Søg efter produkt" id="navn" type="text" @bind="nameSearch" />
</div>

<div class="search-button-container">
	<button class="btn-dark" @onclick="SearchProducts">Søg</button>
	<button class="btn-dark" @onclick="ClearProducts">Ryd</button>
</div>




@if (filteredProducts == null)
{
	<p><em>Ingen produkter fundet.</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Id</th>
				<th>Navn</th>
				<th>Type</th>
				<th>Pris</th>

			</tr>
		</thead>
		<tbody>
			@foreach (var item in filteredProducts)
			{
				<tr>
					<td class="cell">@item.ProductId</td>
					@if (editingProductId == item.ProductId)
					{
						<td class="cell"><input class="cell-input" @bind="item.Name" /></td>
						<td class="cell"><input class="cell-input" @bind="item.Type" /></td>
						<td class="cell">
							<input class="cell-input" @bind="item.Price" />
							<div class="button-container">
								<button class="btn btn-save" @onclick="() => SaveProduct(item)">Gem</button>
								<button class="btn btn-abort" @onclick="CancelEdit">Fortryd</button>
							</div>
						</td>
					}
					else
					{
						<td class="cell">@item.Name</td>
						<td class="cell">@item.Type</td>
						<td class="cell">
							@item.Price
							<div class="button-container">
								<button class="edit-button" @onclick="() => EditProduct(item.ProductId)"><i class="fa-solid fa-pencil"></i></button>
								<button class="edit-button" @onclick="() => DeleteProduct(item.ProductId)"><i class="fa-regular fa-trash-can"></i></button>
							</div>
						</td>
					}
				</tr>
			}
		</tbody>
	</table>
}


@code {
	private string nameSearch;
	private List<Product> products = new List<Product>(); 
	private List<Product> filteredProducts = new List<Product>();
	private int? editingProductId = null;

	[Inject]
	public IProductService Service { get; set; }

	protected override async Task OnInitializedAsync()
	{
		products = (await Service.GetAllProducts()).ToList();
		filteredProducts = products;
	}

	private void EditProduct(int productId)
	{
		editingProductId = productId; // Sæt den aktuelle række i redigeringstilstand
	}

	private async Task SaveProduct(Product product)
	{
		await Service.UpdateProduct(product); // Opdater produktet i databasen
		editingProductId = null; // Afslut redigering
		products = (await Service.GetAllProducts()).ToList();
	}

	private void CancelEdit()
	{
		editingProductId = null; // Annuller redigering
	}

	private async Task DeleteProduct(int productId)
	{
		await Service.DeleteProduct(productId);
		products = (await Service.GetAllProducts()).ToList();
		filteredProducts = products;
		StateHasChanged();
	}

	private void SearchProducts()
	{
		FilterProducts();
		StateHasChanged();
	}

	private void ClearProducts()
	{
		filteredProducts = products;
		nameSearch = "";
		StateHasChanged();
	}

	private void FilterProducts()
	{
		if (string.IsNullOrWhiteSpace(nameSearch))
		{
			filteredProducts = products; // Hvis søgningen er tom, vis alle produkter
		}
		else
		{
			filteredProducts = products.Where(p => p.Name.Contains(nameSearch)).ToList();
		}
	}
}