@using Scooterland.Shared.Models
@using Scooterland.Client.Services.ProductServices;

<div class="search-container">
	<i class="search-icon fa fa-search"></i>
	<input class="search-bar"
	placeholder="Søg efter produkt"
	id="navn"
	type="text"
	@bind="nameSearch"
	@bind:event="oninput" />
</div>

@if (filteredProducts == null)
{
	<p><em>Ingen produkter fundet.</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Id</th>
				<th>Navn</th>
				<th>Type</th>
				<th>Pris</th>

			</tr>
		</thead>
		<tbody>
			@foreach (var item in filteredProducts)
			{
				<tr @onclick="() => OnRowClicked(item)">
					<td class="cell">@item.ProductId</td>
					<td class="cell">@item.Name</td>
					<td class="cell">@item.Type</td>	
					<td class="cell">@item.Price</td>
				</tr>
			}
		</tbody>
	</table>
}


@code {
	[Parameter]
	public EventCallback OnAddedProduct { get; set; }
	[Parameter]
	public Product chosenProduct { get; set; }
	[Inject]
	public IProductService Service { get; set; }
	private List<Product> products = new List<Product>();
	private List<Product> filteredProducts = new List<Product>();
	private int? editingProductId = null;
	private string _nameSearch; //Private felt som gemmer værdien af inputtet fra søgningen
	private string nameSearch   //Bundet til input-feltet for søgning
	{
		get => _nameSearch; //Henter den aktuelle værdi af det private felt _nameSearch
		set
		{
			_nameSearch = value;    //Opdaterer det pribate felt _nameSearch med den nye værdi
			FilterProducts();      //Kalder FilterEmployees() for at opdatere listen med det samme
		}
	}
	protected override async Task OnInitializedAsync()
	{
		products = (await Service.GetAllProducts()).ToList();
		filteredProducts = products;
	}


	private async Task OnRowClicked(Product product)
	{
		//chosenProduct = filteredProducts.FirstOrDefault(p => p.ProductId == productId);

		await OnAddedProduct.InvokeAsync();
	}

	private void FilterProducts()
	{
		if (string.IsNullOrWhiteSpace(nameSearch))
		{
			filteredProducts = products; // Hvis søgningen er tom, vis alle produkter
		}
		else
		{
			filteredProducts = products.Where(p => p.Name.ToLower().Contains(nameSearch.ToLower())).ToList();
		}
	}
}