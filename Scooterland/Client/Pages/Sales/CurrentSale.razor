@using Scooterland.Client.Modules.ProductModules;
@using Scooterland.Client.Modules.SaleModules;
@using Scooterland.Shared.Models;
@using Scooterland.Client.Services.CustomerServices;
@using Scooterland.Client.Services.SaleServices;
@page "/sales/current-sale"

@* <div class="flex-container">
	<!-- Første komponent (fylder 2/3 af bredden) -->
	<div class="two-thirds-width">
		<ProductSelectOverview OnAddedProduct="AddProductToSalesLineItem" />
	</div>

	<!-- Anden komponent (fylder 1/3 af bredden) -->
	<div class="one-third-width">
		<CurrentSaleOverview Customer="@customer" />
	</div>
</div> *@
<CurrentSaleOverview />

<button class="btn btn-primary" @onclick="GoToPreviousPage">
    Tilbage SKAL SLETTES
</button>


<div class="flex-box">
    <button class="btn btn-primary" @onclick="GoToInvoicePage">
        Gå til betaling
    </button>
</div>

@code {
    [Inject]
    public NavigationManager Navigation { get; set; }

    [Inject]
    public ICustomerService Service { get; set; }

    [Inject]
    public ISaleService SaleService { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int SaleId { get; set; }

    Customer customer;

    private async Task GoToInvoicePage()
    {
        Sale currentSale = await SaleService.GetSale(SaleId);
        currentSale.EndDate = DateTime.Now;
		await SaleService.UpdateSale(currentSale);
		Navigation.NavigateTo($"/sales/invoice?SaleId={SaleId}");
	}

	private Product Product;
	private void GoToPreviousPage()
	{
		Navigation.NavigateTo("/sales/create-sale");
	}
}
